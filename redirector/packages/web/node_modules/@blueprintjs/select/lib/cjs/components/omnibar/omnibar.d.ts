/// <reference types="react" />
import * as React from "react";
import { HTMLInputProps, IBackdropProps, IInputGroupProps, IOverlayableProps, IOverlayProps } from "@blueprintjs/core";
import { IListItemsProps } from "../../common";
export interface IOmnibarProps<T> extends IListItemsProps<T> {
    /**
     * Props to spread to `InputGroup`. All props are supported except `ref` (use `inputRef` instead).
     * If you want to control the filter input, you can pass `value` and `onChange` here
     * to override `Select`'s own behavior.
     */
    inputProps?: IInputGroupProps & HTMLInputProps;
    /**
     * Toggles the visibility of the omnibar.
     * This prop is required because the component is controlled.
     */
    isOpen: boolean;
    /**
     * A callback that is invoked when user interaction causes the overlay to close, such as
     * clicking on the overlay or pressing the `esc` key (if enabled).
     * Receives the event from the user's interaction, if there was an event (generally either a
     * mouse or key event). Note that, since this component is controlled by the `isOpen` prop, it
     * will not actually close itself until that prop becomes `false`.
     */
    onClose?: (event?: React.SyntheticEvent<HTMLElement>) => void;
    /** Props to spread to `Overlay`. Note that `content` cannot be changed. */
    overlayProps?: Partial<IOverlayProps> & object;
    /**
     * Whether the filtering state should be reset to initial when an item is selected
     * (immediately before `onItemSelect` is invoked). The query will become the empty string
     * and the first item will be made active.
     * @default false
     */
    resetOnSelect?: boolean;
}
export interface IOmnibarState<T> extends IOverlayableProps, IBackdropProps {
    activeItem?: T;
    query: string;
}
export declare class Omnibar<T> extends React.PureComponent<IOmnibarProps<T>, IOmnibarState<T>> {
    static displayName: string;
    static ofType<T>(): new (props: IOmnibarProps<T>) => Omnibar<T>;
    state: IOmnibarState<T>;
    private TypedQueryList;
    private queryList?;
    private refHandlers;
    render(): JSX.Element;
    componentWillReceiveProps(nextProps: IOmnibarProps<T>): void;
    private renderQueryList;
    private isQueryEmpty;
    private handleActiveItemChange;
    private handleItemSelect;
    private handleQueryChange;
    private handleOverlayClose;
}
