/// <reference types="react" />
import * as React from "react";
import { HTMLInputProps, IInputGroupProps, IPopoverProps } from "@blueprintjs/core";
import { IListItemsProps } from "../../common";
export interface ISelectProps<T> extends IListItemsProps<T> {
    /**
     * Whether the dropdown list can be filtered.
     * Disabling this option will remove the `InputGroup` and ignore `inputProps`.
     * @default true
     */
    filterable?: boolean;
    /**
     * Whether the component is non-interactive.
     * Note that you'll also need to disable the component's children, if appropriate.
     * @default false
     */
    disabled?: boolean;
    /**
     * Props to spread to `InputGroup`. All props are supported except `ref` (use `inputRef` instead).
     * If you want to control the filter input, you can pass `value` and `onChange` here
     * to override `Select`'s own behavior.
     */
    inputProps?: IInputGroupProps & HTMLInputProps;
    /** Props to spread to `Popover`. Note that `content` cannot be changed. */
    popoverProps?: Partial<IPopoverProps> & object;
    /**
     * Whether the filtering state should be reset to initial when an item is selected
     * (immediately before `onItemSelect` is invoked). The query will become the empty string
     * and the first item will be made active.
     * @default false
     */
    resetOnSelect?: boolean;
    /**
     * Whether the filtering state should be reset to initial when the popover closes.
     * The query will become the empty string and the first item will be made active.
     * @default false
     */
    resetOnClose?: boolean;
    /**
     * Callback invoked when the query value changes,
     * through user input or when the filter is reset.
     */
    onQueryChange?: (query: string) => void;
}
export interface ISelectState<T> {
    activeItem?: T;
    isOpen: boolean;
    query: string;
}
export declare class Select<T> extends React.PureComponent<ISelectProps<T>, ISelectState<T>> {
    static displayName: string;
    static ofType<T>(): new (props: ISelectProps<T>) => Select<T>;
    private TypedQueryList;
    private input?;
    private list?;
    private previousFocusedElement;
    private refHandlers;
    constructor(props: ISelectProps<T>, context?: any);
    render(): JSX.Element;
    componentWillReceiveProps(nextProps: ISelectProps<T>): void;
    componentDidUpdate(_prevProps: ISelectProps<T>, prevState: ISelectState<T>): void;
    private renderQueryList;
    private maybeRenderInputClearButton();
    private handleActiveItemChange;
    private handleTargetKeyDown;
    private handleItemSelect;
    private handlePopoverInteraction;
    private handlePopoverWillOpen;
    private handlePopoverDidOpen;
    private handlePopoverWillClose;
    private handleQueryChange;
    private resetQuery;
}
